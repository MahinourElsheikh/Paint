/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tests;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JColorChooser;
import static tests.Shape.Historylist;
import static tests.Shape.Shapeslist;

/**
 *
 * @author Safo-PC
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        this.setResizable(false);
        g2 = (Graphics2D) jPanel1.getGraphics();

    }
    Reusableshapes Reuse = Reusableshapes.getInstance();
    List<Shape> Shapeshistory = new ArrayList();
    private int xstart;
    private int ystart;
    private int xend;
    private int yend;
    private int dx;
    private int dy;
    boolean flag;
    boolean m;
    int i = 0;
    Color colorchosen;

    Point2D ptri1;
    Point2D ptri2;
    Point2D ptrir1;
    Point2D ptrir2;
    Point2D prec1;
    Point2D prec2;
    Point2D psquare1;
    Point2D psquare2;
    Point2D pcir1;
    Point2D pcir2;
    Point2D pelli1;
    Point2D pelli2;
    Point2D pline1;
    Point2D pline2;
    int tri = 0;
    Shape s;

    private Graphics2D g2;
    private final int cotes = 3;

    int[] xcoordinate = new int[cotes];
    int[] ycoordinate = new int[cotes];
    Shapefactory factory = new Shapefactory();
    RectangleBuilder Sc1 = new RectangleBuilder();
    RectangleBuilder Sc2 = new RectangleBuilder();
    RectangleBuilder Sc3 = new RectangleBuilder();
    RectangleBuilder Sc4 = new RectangleBuilder();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        textArea1 = new java.awt.TextArea();
        jPanel1 = new javax.swing.JPanel();
        jRadioCircle = new javax.swing.JRadioButton();
        jRadioLine = new javax.swing.JRadioButton();
        jRadioRectangle = new javax.swing.JRadioButton();
        jRadioTriangle = new javax.swing.JRadioButton();
        jRadioSquare = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jRadioMove = new javax.swing.JRadioButton();
        jRadioResize = new javax.swing.JRadioButton();
        jRadioellipse = new javax.swing.JRadioButton();
        jRadioCopy = new javax.swing.JRadioButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 204));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel1MouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel1MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1054, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 989, Short.MAX_VALUE)
        );

        buttonGroup1.add(jRadioCircle);
        jRadioCircle.setText("Circle");

        buttonGroup1.add(jRadioLine);
        jRadioLine.setText("Line");
        jRadioLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioLineActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioRectangle);
        jRadioRectangle.setText("Rectangle");

        buttonGroup1.add(jRadioTriangle);
        jRadioTriangle.setText("Triangle");
        jRadioTriangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioTriangleActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioSquare);
        jRadioSquare.setText("Square");

        jButton1.setText("Clear");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Redo");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Undo");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Delete");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Select");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("choose color");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setOpaque(true);

        buttonGroup1.add(jRadioMove);
        jRadioMove.setText("Move");
        jRadioMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioMoveActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioResize);
        jRadioResize.setText("Resize");

        buttonGroup1.add(jRadioellipse);
        jRadioellipse.setText("Ellipse");

        buttonGroup1.add(jRadioCopy);
        jRadioCopy.setText("Copy");

        jButton6.setText("Rotate");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioCopy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioMove)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioResize, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6)
                                .addGap(18, 18, 18)
                                .addComponent(jButton5))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jRadioellipse, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jRadioCircle, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jRadioSquare, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(jRadioTriangle, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(73, 73, 73)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioLine, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioRectangle)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(702, 702, 702))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jRadioellipse)
                                    .addComponent(jRadioCircle)
                                    .addComponent(jRadioSquare)
                                    .addComponent(jRadioTriangle)
                                    .addComponent(jRadioLine)
                                    .addComponent(jRadioRectangle)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton1)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jRadioCopy)
                            .addComponent(jRadioMove)
                            .addComponent(jRadioResize)
                            .addComponent(jButton6)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked

        jPanel1.update(getG2());
        Reuse.free.clear();
        Reuse.used.clear();

        Shapeslist.clear();
        paintall();

    }//GEN-LAST:event_jButton1MouseClicked

    private void jRadioTriangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioTriangleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioTriangleActionPerformed

    private void jRadioLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioLineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioLineActionPerformed

    private void jPanel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseReleased
        Point2D p1 = evt.getPoint();
        boolean n;
        jPanel1.update(getG2());
        paintall();

        if (jRadioResize.isSelected()) {//bta3t el rectangle//

            if (s instanceof Rectangle) {
                jPanel1.update(getG2());
                prec2 = evt.getPoint();
                s.resize(g2, prec1, prec2);
                Reuse.refresh(Shapeslist);

                paintall();
            }
            if (s instanceof Square) {
                jPanel1.update(getG2());
                psquare2 = evt.getPoint();
                s.resize(g2, psquare1, psquare2);

                paintall();
            }
            if (s instanceof triangle) {
                jPanel1.update(getG2());
                ptrir2 = evt.getPoint();
                s.resize(g2, tri, ptrir2);

                jPanel1.update(getG2());

                paintall();
            }
            if (s instanceof Circle) {
                jPanel1.update(getG2());
                pcir2 = evt.getPoint();
                s.resize(g2, pcir1, pcir2);

                paintall();
            }

            if (s instanceof Ellipse) {
                jPanel1.update(getG2());
                pelli2 = evt.getPoint();
                s.resize(g2, pelli1, pelli2);

                paintall();
            }
            if (s instanceof Line) {
                jPanel1.update(getG2());
                pline2 = evt.getPoint();
                s.resize(g2, pline1, pline2);
                jPanel1.update(getG2());

                paintall();
            }

        }

        if (jRadioLine.isSelected()) {
            jPanel1.update(getG2());
            xend = evt.getX();
            yend = evt.getY();
            Shape Shape1 = factory.getShape("LINE");
            ((Line) Shape1).setLine(xstart, ystart, xend, yend);
            ((Line) Shape1).setC(colorchosen);
            Shapeslist.add((Line) Shape1);
            Reuse.free.push((Line) Shape1);
            Historylist.add((Line) Shape1);

            paintall();
        }

        if (jRadioCircle.isSelected()) {
            jPanel1.update(getG2());
            xend = evt.getX() - xstart;
            yend = evt.getY() - ystart;
            Shape Shape1 = factory.getShape("CIRCLE");
            ((Circle) Shape1).setX(xstart);
            ((Circle) Shape1).setY(ystart);
            ((Circle) Shape1).setHight(yend);
            ((Circle) Shape1).setWidth(xend);
            ((Circle) Shape1).setC(colorchosen);
            Shapeslist.add((Circle) Shape1);
            Reuse.free.push((Circle) Shape1);
            Historylist.add((Circle) Shape1);

            paintall();
        }
        if (jRadioSquare.isSelected()) {
            jPanel1.update(getG2());
            xend = evt.getX() - xstart;
            yend = evt.getY() - ystart;
            Shape Shape2 = factory.getShape("SQUARE");
            ((Square) Shape2).setX(xstart);
            ((Square) Shape2).setY(ystart);
            ((Square) Shape2).setDimension(xend);

            ((Square) Shape2).setC(colorchosen);

            Shapeslist.add((Square) Shape2);
            Reuse.free.push((Square) Shape2);
            Historylist.add((Square) Shape2);

            paintall();
        }
        if (jRadioellipse.isSelected()) {
            jPanel1.update(getG2());
            xend = evt.getX() - xstart;
            yend = evt.getY() - ystart;
            Shape Shape1 = factory.getShape("ELLIPSE");
            ((Ellipse) Shape1).setX(xstart);
            ((Ellipse) Shape1).setY(ystart);
            ((Ellipse) Shape1).setHight(yend);
            ((Ellipse) Shape1).setWidth(xend);
            ((Ellipse) Shape1).setC(colorchosen);

            Shapeslist.add((Ellipse) Shape1);
            Reuse.free.push((Ellipse) Shape1);
            Historylist.add((Ellipse) Shape1);

            paintall();

        }
        if (jRadioRectangle.isSelected()) {
            jPanel1.update(getG2());
            xend = evt.getX() - xstart;
            yend = evt.getY() - ystart;
            RectangleBuilder rec1 = new RectangleBuilder();
            rec1.setX(xstart);
            rec1.setY(ystart);
            rec1.setHeight(yend);
            rec1.setWidth(xend);

            rec1.setC(colorchosen);

            Shapeslist.add((Rectangle) rec1.createRectangle());
            Reuse.free.push((Rectangle) rec1.createRectangle());
            Historylist.add((Rectangle) rec1.createRectangle());

            paintall();
        }

        if (jRadioTriangle.isSelected()) {
            if (i == 3) {
                jPanel1.update(getG2());
                Shape Shape1 = factory.getShape("TRIANGLE", xcoordinate, ycoordinate);
                ((triangle) Shape1).setC(colorchosen);
                ((triangle) Shape1).draw(g2);
                Shapeslist.add(((triangle) Shape1));
                Historylist.add((triangle) Shape1);
                Reuse.free.push((triangle) Shape1);

                i = 0;
                paintall();

            }
        }

        if (jRadioMove.isSelected()) {
            if (s instanceof triangle) {
                jPanel1.update(getG2());
                ptri2 = evt.getPoint();

                dx = (int) (ptri2.getX() - ptri1.getX());
                dy = (int) (ptri2.getY() - ptri1.getY());
                System.out.println(dx + "\n" + dy);
                s.Move(g2, dx, dy);

              
                paintall();

            }
             if (s instanceof Line)
            {
                jPanel1.update(getG2());
                pline2 = evt.getPoint();

                dx = (int) (pline2.getX() - pline1.getX());
                dy = (int) (pline2.getY() - pline1.getY());
                System.out.println(dx + "\n" + dy);
                s.Move(g2, dx, dy);
               

                paintall();
            }
        }
        refreshtable();
    }//GEN-LAST:event_jPanel1MouseReleased

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        // TODO add your handling code here:

        if (getG2() == null) {
            setG2((Graphics2D) jPanel1.getGraphics());
        }

        if (jRadioButton1.isSelected() != true) {
            xstart = evt.getX();

            ystart = evt.getY();
            xend = evt.getX();
            yend = evt.getY();

            if (jRadioTriangle.isSelected()) {
                if (i < 3) {
                    xcoordinate[i] = evt.getX();
                    ycoordinate[i] = evt.getY();
                    i++;
                    paintall();
                }
            }
        }
        if (jRadioMove.isSelected()) {
            if (s instanceof triangle) {
                {
                    ptri1 = evt.getPoint();

                }
                paintall();

            }
            if (s instanceof Line) {
                {
                    pline1 = evt.getPoint();
                }
                paintall();

            }
        }
        if (jRadioResize.isSelected()) {
            if (s instanceof Rectangle && m) {

                prec1 = evt.getPoint();

                paintall();
            }
            if (s instanceof triangle && m) {

                ptrir1 = evt.getPoint();

                if (Sc1.createRectangle().contains(ptrir1)) {
                    tri = 0;
                    System.out.println(tri);
                    return;
                } else if (Sc2.createRectangle().contains(ptrir1)) {
                    tri = 1;
                    System.out.println(tri);
                    return;
                } else if (Sc3.createRectangle().contains(ptrir1)) {
                    tri = 2;
                    System.out.println(tri);
                    return;
                } else {
                    tri = -1;
                    System.out.println("m7ssh");
                }
                paintall();
            }
            if (s instanceof Square && m) {

                psquare1 = evt.getPoint();

                paintall();

            }
            if (s instanceof Circle && m) {

                pcir1 = evt.getPoint();

                paintall();
            }

            if (s instanceof Ellipse && m) {

                pelli1 = evt.getPoint();

                paintall();
            }
            if (s instanceof Line) {

                pline1 = evt.getPoint();

                paintall();

            }

        }


    }//GEN-LAST:event_jPanel1MousePressed

    private void jPanel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1MouseEntered

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked

        if (jRadioButton1.isSelected()) {

            Point2D p = evt.getPoint();

            for (int j = 0; j < Shapeslist.size(); j++) {

                s = Shapeslist.get(j);

                if (s instanceof Square == true) {

                    m = s.contains(p);
                    if (m) {
                        ( Sc1).setHeight(10);
                        (Sc1).setWidth(10);
                        ( Sc1).setX(((Square) s).getX() - 5);
                        ( Sc1).setY(((Square) s).getY() - 5);
                        (Sc1).setC(Color.BLUE);
                        Sc1.createRectangle().draw(getG2());

                        ( Sc2).setHeight(10);
                        ( Sc2).setWidth(10);
                        ( Sc2).setX((((Square) s).getX()) - 5);
                        ( Sc2).setY((((Square) s).getY() - 5) + ((Square) s).getDimension());
                        ( Sc2).setC(Color.BLUE);
                        Sc2.createRectangle().draw(getG2());

                        ( Sc3).setHeight(10);
                        ( Sc3).setWidth(10);
                        ( Sc3).setX((((Square) s).getX() - 5) + ((Square) s).getDimension());
                        (Sc3).setY(((Square) s).getY() - 5);
                        ( Sc3).setC(Color.BLUE);
                        Sc3.createRectangle().draw(getG2());

                        ( Sc4).setHeight(10);
                        ( Sc4).setWidth(10);
                        ( Sc4).setX((((Square) s).getX() - 5) + ((Square) s).getDimension());
                        ( Sc4).setY((((Square) s).getY() - 5) + ((Square) s).getDimension());
                        (Sc4).setC(Color.BLUE);
                        Sc4.createRectangle().draw(getG2());

                        System.out.println("square found");
                        return;

                    }
                }

                if (s instanceof Rectangle == true) {

                    m = s.contains(p);
                    if (m) {
                        Sc1.setHeight(10);
                        Sc1.setWidth(10);
                        Sc1.setX(((Rectangle) s).getX() - 5);
                        Sc1.setY(((Rectangle) s).getY() - 5);
                        Sc1.setC(Color.BLUE);
                        Sc1.createRectangle().draw(getG2());

                        (Sc2).setHeight(10);
                        (Sc2).setWidth(10);
                        (Sc2).setX((((Rectangle) s).getX()) - 5);
                        (Sc2).setY((((Rectangle) s).getY() - 5) + ((Rectangle) s).getHeight());
                        (Sc2).setC(Color.BLUE);
                        Sc2.createRectangle().draw(getG2());

                        (Sc3).setHeight(10);
                        (Sc3).setWidth(10);
                        (Sc3).setX((((Rectangle) s).getX() - 5) + ((Rectangle) s).getWidth());
                        (Sc3).setY(((Rectangle) s).getY() - 5);
                        (Sc3).setC(Color.BLUE);
                        Sc3.createRectangle().draw(getG2());

                        (Sc4).setHeight(10);
                        (Sc4).setWidth(10);
                        (Sc4).setX((((Rectangle) s).getX() - 5) + ((Rectangle) s).getWidth());
                        (Sc4).setY((((Rectangle) s).getY() - 5) + ((Rectangle) s).getHeight());
                        (Sc4).setC(Color.BLUE);
                       Sc4.createRectangle().draw(getG2());

                        System.out.println("Shape found");
                        return;

                    }

                }
                if (s instanceof triangle == true) {
                    Polygon polygon = (Polygon) s;
                    m = polygon.contains(evt.getPoint());

                    if (m) {

                        Sc1.setHeight(15);
                        Sc1.setWidth(15);
                        Sc1.setX(((triangle) s).getXpoints()[0] - 7.5);
                        Sc1.setY(((triangle) s).getYpoints()[0] - 7.5);
                        Sc1.setC(Color.BLUE);
                        Sc1.createRectangle().draw(getG2());

                        Sc2.setHeight(15);
                        Sc2.setWidth(15);
                        Sc2.setX((((triangle) s).getXpoints()[1]) - 7.5);
                        Sc2.setY((((triangle) s).getYpoints()[1] - 7.5));
                        Sc2.setC(Color.BLUE);
                        Sc2.createRectangle().draw(getG2());

                        Sc3.setHeight(15);
                        Sc3.setWidth(15);
                        Sc3.setX((((triangle) s).getXpoints()[2] - 7.5));
                        Sc3.setY(((triangle) s).getYpoints()[2] - 7.5);
                        Sc3.setC(Color.BLUE);
                        Sc3.createRectangle().draw(getG2());

                        System.out.println("triangle found ");
                        return;
                    }
                }
                if (s instanceof Circle == true) {

                    m = s.contains(p);
                    if (m) {
                        (Sc1).setHeight(10);
                        (Sc1).setWidth(10);
                        (Sc1).setX(((Circle) s).getX() - 5);
                        (Sc1).setY(((Circle) s).getY() - 5);
                        (Sc1).setC(Color.BLUE);
                        Sc1.createRectangle().draw(getG2());

                        (Sc2).setHeight(10);
                        (Sc2).setWidth(10);
                        (Sc2).setX((((Circle) s).getX()) - 5);
                        (Sc2).setY((((Circle) s).getY() - 5) + ((Circle) s).getHeight());
                        (Sc2).setC(Color.BLUE);
                        Sc2.createRectangle().draw(getG2());

                        (Sc3).setHeight(10);
                        (Sc3).setWidth(10);
                        (Sc3).setX((((Circle) s).getX() - 5) + ((Circle) s).getWidth());
                        (Sc3).setY(((Circle) s).getY() - 5);
                        (Sc3).setC(Color.BLUE);
                       Sc3.createRectangle().draw(getG2());

                        (Sc4).setHeight(10);
                        (Sc4).setWidth(10);
                        (Sc4).setX((((Circle) s).getX() - 5) + ((Circle) s).getWidth());
                        (Sc4).setY((((Circle) s).getY() - 5) + ((Circle) s).getHeight());
                        (Sc4).setC(Color.BLUE);
                        Sc4.createRectangle().draw(getG2());

                        System.out.println("circle found");
                        return;

                    }
                }

                if (s instanceof Ellipse == true) {

                    m = s.contains(p);
                    if (m) {
                            ( Sc1).setHeight(10);
                        ( Sc1).setWidth(10);
                        ( Sc1).setX(((Ellipse) s).getX() - 5);
                        ( Sc1).setY(((Ellipse) s).getY() - 5);
                        ( Sc1).setC(Color.BLUE);
                       Sc1.createRectangle().draw(getG2());

                        ( Sc2).setHeight(10);
                        ( Sc2).setWidth(10);
                        ( Sc2).setX((((Ellipse) s).getX()) - 5);
                        ( Sc2).setY((((Ellipse) s).getY() - 5) + ((Ellipse) s).getHeight());
                        (Sc2).setC(Color.BLUE);
                        Sc2.createRectangle().draw(getG2());

                        ( Sc3).setHeight(10);
                        ( Sc3).setWidth(10);
                        ( Sc3).setX((((Ellipse) s).getX() - 5) + ((Ellipse) s).getWidth());
                        ( Sc3).setY(((Ellipse) s).getY() - 5);
                        ( Sc3).setC(Color.BLUE);
                        Sc3.createRectangle().draw(getG2());

                        ( Sc4).setHeight(10);
                        ( Sc4).setWidth(10);
                        ( Sc4).setX((((Ellipse) s).getX() - 5) + ((Ellipse) s).getWidth());
                        ( Sc4).setY((((Ellipse) s).getY() - 5) + ((Ellipse) s).getHeight());
                        (Sc4).setC(Color.BLUE);
                        Sc4.createRectangle().draw(getG2());
                        System.out.println("Ellipse found");
                        return;

                    }
                }
                if (s instanceof Line == true) {
                     
                    boolean z = ((Line) s).getClickedLine((int)p.getX(),(int) p.getY());
                    if( z==true)
                    {
                    (Sc1).setHeight(15);
                        ( Sc1).setWidth(15);
                        ( Sc1).setX((((Line) s).getX1()) - 7.5);
                        ( Sc1).setY((((Line) s).getY1()) - 7.5);
                        ( Sc1).setC(Color.BLACK);
                        Sc1.createRectangle().draw(getG2());

                        ( Sc2).setHeight(15);
                        ( Sc2).setWidth(15);
                        ( Sc2).setX((((Line) s).getX2())- 7.5);
                        ( Sc2).setY((((Line) s).getY2()) - 7.5);
                        ( Sc2).setC(Color.BLACK);
                        Sc2.createRectangle().draw(getG2());
                     paintall();
                    return;
                    }

                }

            }
        } else if (jRadioCopy.isSelected()) {
            if (s instanceof Rectangle && m) {

                jPanel1.update(getG2());
                Rectangle rec1 = (Rectangle) s.clone();
                Shapeslist.add(rec1);
                Reuse.free.push(rec1);
                paintall();
            }
            if (s instanceof triangle && m) {
                jPanel1.update(getG2());
                triangle shape1 = (triangle) s.clone();
                Shapeslist.add(shape1);
                Reuse.free.push(shape1);
                paintall();
            }
            if (s instanceof Ellipse && m) {
                jPanel1.update(getG2());
                Ellipse shape1 = (Ellipse) s.clone();
                Shapeslist.add(shape1);
                Reuse.free.push(shape1);
                paintall();
            }
            if (s instanceof Circle && m) {
                jPanel1.update(getG2());
                Circle shape1 = (Circle) s.clone();
                Shapeslist.add(shape1);
                Reuse.free.push(shape1);
                paintall();
            }
            if (s instanceof Line) {
                jPanel1.update(getG2());
                Line shape1 = (Line) s.clone();
                System.out.println("line copied");
                Shapeslist.add(shape1);
                Reuse.free.push(shape1);
                paintall();
            }
            if (s instanceof Square && m) {
                jPanel1.update(getG2());
                Square shape1 = (Square) s.clone();
                Shapeslist.add(shape1);
                Reuse.free.push(shape1);
                paintall();
            }

        }

    }//GEN-LAST:event_jPanel1MouseClicked

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        // TODO add your handling code here:
        Point2D p1 = evt.getPoint();

        boolean n;
        if (jRadioMove.isSelected()) {

            p1 = evt.getPoint();

            if (s instanceof Rectangle) {
                jPanel1.update(getG2());
                ((Rectangle) s).Move(g2, p1);
                Reuse.refresh(Shapeslist);
                jPanel1.update(getG2());
                paintall();

            }
            if (s instanceof Square) {
                jPanel1.update(getG2());
                s.Move(g2, p1);
                jPanel1.update(getG2());
                paintall();
            }
            if (s instanceof Circle) {
                jPanel1.update(getG2());
                s.Move(g2, p1);
                jPanel1.update(getG2());
                paintall();

            }
            if (s instanceof Ellipse) {
                jPanel1.update(getG2());
                s.Move(g2, p1);
                jPanel1.update(getG2());
                paintall();

            }

        }
        if (jRadioResize.isSelected()) {
            jPanel1.update(getG2());

            if (s instanceof triangle) {

                ptrir2 = evt.getPoint();
                s.resize(g2, tri, ptrir2);
                jPanel1.update(getG2());

                paintall();
            }

        } else {

            if (jRadioRectangle.isSelected()) {
                jPanel1.update(getG2());
                xend = evt.getX() - xstart;
                yend = evt.getY() - ystart;

                RectangleBuilder rec1 = new RectangleBuilder();
                rec1.setX(xstart);
                rec1.setY(ystart);
                rec1.setHeight(yend);
                rec1.setWidth(xend);
                rec1.createRectangle().draw(getG2());

                paintall();

            }
            if (jRadioLine.isSelected()) {
                jPanel1.update(getG2());
                xend = evt.getX();
                yend = evt.getY();

                Shape Shape1 = factory.getShape("Line");
                ((Line) Shape1).setLine(xstart, ystart, xend, yend);
                ((Line) Shape1).setC(colorchosen);
                Shape1.draw(getG2());

                paintall();
            }
            if (jRadioSquare.isSelected()) {
                jPanel1.update(getG2());
                xend = evt.getX() - xstart;

                Shape Shape2 = factory.getShape("SQUARE");
                ((Square) Shape2).setX(xstart);
                ((Square) Shape2).setY(ystart);
                ((Square) Shape2).setDimension((xend));
                ((Square) Shape2).setC(colorchosen);

                Shape2.draw(getG2());

                paintall();
            }
            if (jRadioellipse.isSelected()) {
                jPanel1.update(getG2());
                xend = evt.getX() - xstart;
                yend = evt.getY() - ystart;

                Shape Shape1 = factory.getShape("ELLIPSE");
                ((Ellipse) Shape1).setX(xstart);
                ((Ellipse) Shape1).setY(ystart);
                ((Ellipse) Shape1).setHight(yend);
                ((Ellipse) Shape1).setWidth(xend);
                ((Ellipse) Shape1).setC(colorchosen);
                Shape1.draw(getG2());

                paintall();

            }

            if (jRadioCircle.isSelected()) {
                jPanel1.update(getG2());
                xend = evt.getX() - xstart;

                Shape Shape1 = factory.getShape("CIRCLE");
                ((Circle) Shape1).setX(xstart);
                ((Circle) Shape1).setY(ystart);
                ((Circle) Shape1).setHight(xend);
                ((Circle) Shape1).setWidth(xend);
                ((Circle) Shape1).setC(colorchosen);
                Shape1.draw(getG2());

                paintall();

            }

        }
    }//GEN-LAST:event_jPanel1MouseDragged

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        Shape ss = null;
        paintall();
        jPanel1.update(getG2());

        ss = Reuse.undo();

        Shapeslist.remove(ss);

        paintall();

    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        Shape s = null;
        paintall();
        jPanel1.update(getG2());

        s = Reuse.redo();
        if (s == null) {
            paintall();
            return;
        }

        Shapeslist.add(s);
        paintall();


    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        if (jRadioButton1.isSelected()) {
            if (m == true) {

                jPanel1.update(getG2());
                Shapeslist.remove(s);
                Reuse.refresh(Shapeslist);
                System.out.println("Shape deleted");
                jPanel1.update(getG2());
                paintall();
            } else {
                System.out.println("not found");
            }
            if (s instanceof Line) {
                //((Line) s1).removeLine((Line2D) s1);
                jPanel1.update(getG2());
                Shapeslist.remove((Line) s);
                Reuse.refresh(Shapeslist);
                System.out.println("Shape deleted");
                jPanel1.update(getG2());
                paintall();
            } else {
                System.out.println("line not found");
            }

        }


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        colorchosen = JColorChooser.showDialog(null, "choose color", jLabel2.getBackground());

        jLabel2.setBackground(colorchosen);


    }//GEN-LAST:event_jButton4ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioMoveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioMoveActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        if (jRadioButton1.isSelected()) {
            jPanel1.update(getG2());
//            s.rotate(g2,45);
            //jPanel1.update(getG2());
            Reuse.refresh(Shapeslist);
            paintall();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    private void paintall() {

        for (int k = 0; k < Shapeslist.size(); k++) {
            Shape shape1 = Shapeslist.get(k);
            shape1.draw(g2);
        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioCircle;
    private javax.swing.JRadioButton jRadioCopy;
    private javax.swing.JRadioButton jRadioLine;
    private javax.swing.JRadioButton jRadioMove;
    private javax.swing.JRadioButton jRadioRectangle;
    private javax.swing.JRadioButton jRadioResize;
    private javax.swing.JRadioButton jRadioSquare;
    private javax.swing.JRadioButton jRadioTriangle;
    private javax.swing.JRadioButton jRadioellipse;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the g2
     */
    public Graphics2D getG2() {
        return g2;
    }

    /**
     * @param g2 the g2 to set
     */
    public void setG2(Graphics2D g2) {
        this.g2 = g2;
    }
    void refreshtable() {
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                getname(),
                new String[]{
                    "History of shape"
                }
        ) {
            boolean[] canEdit = new boolean[]{
                false
            };
        });
    }
    String [][] getname()
     {
         String [][] names=new String[Historylist.size()][1];
     for (int i = 0; i < Historylist.size(); i++) {
            names[i][0] = Historylist.get(i).getname();
     
     }
     return names;}
}
